# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

variables:
  windows_vm: windows-2019
  mac_vm: macos-10.14
  linux_vm: ubuntu-18.04
  rust_style: stable

stages:
- stage: build
  displayName: Build
  jobs:
  - job: deploy
    displayName: Deploy
    strategy:
      matrix:
        windows:
          imageName: ${{ variables.windows_vm }}
          target: 'x86_64-pc-windows-msvc'
          channel: stable
          crate_name: node-template
        mac:
          imageName: ${{ variables.mac_vm }}
          channel: stable
          crate_name: node-template
        linux:
          imageName: ${{ variables.linux_vm }}
          channel: stable
          crate_name: node-template
    pool:
      vmImage: $(imageName)
    timeoutInMinutes: 120
    steps:
    - template: azure/install-rust.yml@templates
      parameters:
        rust: $(channel)
    - script: |
        choco install llvm
        if %ERRORLEVEL% NEQ 0 goto :eof
        echo ##vso[task.setvariable variable=PATH]%PATH%;C:\Program Files\LLVM\bin
      displayName: 'Install llvm'
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
    - bash: ./scripts/init.sh
      displayName: Substrate setup
    - script: cargo build --release -vv
      displayName: Building
    - task: CopyFiles@2
      displayName: Stage assets on Linux and Mac OS
      condition: ne( variables['Agent.OS'], 'Windows_NT' )
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/target/release'
        contents: $(crate_name)
        targetFolder: '$(Build.BinariesDirectory)/'
    - task: CopyFiles@2
      displayName: Stage assets on Windows
      condition: eq( variables['Agent.OS'], 'Windows_NT' )
      inputs:
        sourceFolder: '$(Build.SourcesDirectory)/target/release'
        contents: $(crate_name).exe
        targetFolder: '$(Build.BinariesDirectory)/'
    - task: ArchiveFiles@2
      displayName: Zip assets
      inputs:
        rootFolderOrFile: '$(Build.BinariesDirectory)/'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(crate_name)-$(Build.SourceBranchName)-$(target).zip'
    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'riusricardo'
        repositoryName: 'riusricardo/contracts-chain'
        action: 'edit'
        target: '$(Build.SourceVersion)'
        tag: 'v1.0'
        title: '$(Build.SourceBranchName)'
        assets: '$(Build.ArtifactStagingDirectory)/$(crate_name)-$(Build.SourceBranchName)-$(target).zip'
        addChangeLog: false

resources:
  repositories:
    - repository: templates
      type: github
      name: crate-ci/azure-pipelines
      endpoint: riusricardo
    - repository: gh-install
      type: github
      name: crate-ci/gh-install
      endpoint: riusricardo